spring:
  application:
    name: api-gateway

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true

      routes:
        # User Service Routes
        - id: user-service-auth
          uri: lb://user-service
          predicates:
            - Path=/api/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user-service

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/users/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker

        # Exam Service Routes
        - id: exam-service
          uri: lb://exam-service
          predicates:
            - Path=/api/exams/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: examServiceCircuitBreaker

        # Question Service Routes
        - id: question-service
          uri: lb://question-service
          predicates:
            - Path=/api/questions/**
          filters:
            - JwtAuthenticationFilter

        # Attempt Service Routes
        - id: attempt-service
          uri: lb://attempt-service
          predicates:
            - Path=/api/attempts/**
          filters:
            - JwtAuthenticationFilter

        # Result Service Routes
        - id: result-service
          uri: lb://result-service
          predicates:
            - Path=/api/results/**
          filters:
            - JwtAuthenticationFilter

        # Notification Service Routes
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/notifications/**
          filters:
            - JwtAuthenticationFilter

      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:3000"
              - "http://localhost:3001"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms

server:
  port: 8080

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:oerms-secret-key-change-in-production-must-be-at-least-256-bits}
  expiration: 86400000  # 24 hours in milliseconds

# Rate Limiting
rate-limit:
  requests-per-second: 10
  burst-capacity: 20

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: DEBUG
    com.oerms: DEBUG

resilience4j:
  circuitbreaker:
    instances:
      userServiceCircuitBreaker:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000
        permitted-number-of-calls-in-half-open-state: 3
      examServiceCircuitBreaker:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  data:
    redis:
      host: redis
      port: 6379

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/