services:
  # ============================================================
  # Infrastructure Services
  # ============================================================

  postgres:
    image: postgres:15-alpine
    container_name: oerms-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oerms}
      POSTGRES_USER: ${DB_USERNAME:-oerms_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-oerms_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: oerms-api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: oerms-user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-oerms}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-oerms_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-oerms_password}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  exam-service:
    build:
      context: ./exam-service
      dockerfile: Dockerfile
    container_name: oerms-exam-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-oerms}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-oerms_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-oerms_password}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  question-service:
    build:
      context: ./question-service
      dockerfile: Dockerfile
    container_name: oerms-question-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-oerms}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-oerms_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-oerms_password}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - oerms-network
    volumes:
      - question_uploads:/tmp/oerms/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  attempt-service:
    build:
      context: ./attempt-service
      dockerfile: Dockerfile
    container_name: oerms-attempt-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-oerms}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-oerms_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-oerms_password}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  result-service:
    build:
      context: ./result-service
      dockerfile: Dockerfile
    container_name: oerms-result-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-oerms}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-oerms_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-oerms_password}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      WEBSOCKET_ALLOWED_ORIGINS: ${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: oerms-notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-oerms}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-oerms_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-oerms_password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      NOTIFICATION_FROM_EMAIL: ${NOTIFICATION_FROM_EMAIL}
      WHATSAPP_API_URL: ${WHATSAPP_API_URL}
      WHATSAPP_API_TOKEN: ${WHATSAPP_API_TOKEN}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_ENABLED: ${WHATSAPP_ENABLED:-false}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - oerms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # ============================================================
  # Monitoring Services (Optional)
  # ============================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: oerms-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - oerms-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: oerms-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - oerms-network
    restart: unless-stopped

networks:
  oerms-network:
    driver: bridge
    name: oerms-network

volumes:
  postgres_data:
    name: oerms_postgres_data
  redis_data:
    name: oerms_redis_data
  zookeeper_data:
    name: oerms_zookeeper_data
  zookeeper_logs:
    name: oerms_zookeeper_logs
  kafka_data:
    name: oerms_kafka_data
  question_uploads:
    name: oerms_question_uploads
  prometheus_data:
    name: oerms_prometheus_data
  grafana_data:
    name: oerms_grafana_data