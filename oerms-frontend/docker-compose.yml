version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE=http://gateway:8080
    depends_on:
      - gateway
    networks:
      - oerms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  gateway:
    image: openjdk:17-jre-slim
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://registry:8761/eureka
      - EXAM_SERVICE_URL=http://exam-service:8081
      - QUESTION_SERVICE_URL=http://question-service:8082
      - RESULT_SERVICE_URL=http://result-service:8083
      - USER_SERVICE_URL=http://user-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
    depends_on:
      - registry
      - exam-service
      - question-service
      - result-service
      - user-service
      - notification-service
    networks:
      - oerms-network
    restart: unless-stopped

  # Service Registry
  registry:
    image: openjdk:17-jre-slim
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - oerms-network
    restart: unless-stopped

  # Exam Service
  exam-service:
    image: openjdk:17-jre-slim
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://registry:8761/eureka
      - DATABASE_URL=jdbc:postgresql://postgres:5432/oerms_exam
      - DATABASE_USERNAME=oerms_user
      - DATABASE_PASSWORD=oerms_password
    depends_on:
      - postgres
      - registry
    networks:
      - oerms-network
    restart: unless-stopped

  # Question Service
  question-service:
    image: openjdk:17-jre-slim
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://registry:8761/eureka
      - DATABASE_URL=jdbc:postgresql://postgres:5432/oerms_question
      - DATABASE_USERNAME=oerms_user
      - DATABASE_PASSWORD=oerms_password
    depends_on:
      - postgres
      - registry
    networks:
      - oerms-network
    restart: unless-stopped

  # Result Service
  result-service:
    image: openjdk:17-jre-slim
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://registry:8761/eureka
      - DATABASE_URL=jdbc:postgresql://postgres:5432/oerms_result
      - DATABASE_USERNAME=oerms_user
      - DATABASE_PASSWORD=oerms_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - kafka
      - registry
    networks:
      - oerms-network
    restart: unless-stopped

  # User Service
  user-service:
    image: openjdk:17-jre-slim
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://registry:8761/eureka
      - DATABASE_URL=jdbc:postgresql://postgres:5432/oerms_user
      - DATABASE_USERNAME=oerms_user
      - DATABASE_PASSWORD=oerms_password
    depends_on:
      - postgres
      - registry
    networks:
      - oerms-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    image: openjdk:17-jre-slim
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://registry:8761/eureka
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - WHATSAPP_API_URL=${WHATSAPP_API_URL}
      - WHATSAPP_API_TOKEN=${WHATSAPP_API_TOKEN}
    depends_on:
      - kafka
      - registry
    networks:
      - oerms-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=oerms
      - POSTGRES_USER=oerms_user
      - POSTGRES_PASSWORD=oerms_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - oerms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oerms_user -d oerms"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for messaging
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    networks:
      - oerms-network
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - oerms-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - oerms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - gateway
    networks:
      - oerms-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  oerms-network:
    driver: bridge
